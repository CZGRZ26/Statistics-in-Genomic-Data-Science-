#Dependencies
#This document depends on the following packages:

  library(devtools)
  library(Biobase)
  library(limma)
  library(edge)
#To install these packages you can use the code (or if you are compiling the document, remove the eval=FALSE from the chunk.)

install.packages(c("devtools"))
source("http://www.bioconductor.org/biocLite.R")
biocLite(c("Biobase","limma","jdstorey/edge"))

#Download the data
#Here we are going to use some data from the paper Detection of redundant fusion transcripts as biomarkers or disease-specific therapeutic targets in breast cancer. that uses data from different normal human tissues (called the Illumina BodyMap data).

con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bottomly_eset.RData")
load(file=con)
close(con)
bot = bottomly.eset
pdata=pData(bot)
edata=as.matrix(exprs(bot))
fdata = fData(bot)
ls()

#Transform the data
#Here we will transform the data and remove lowly expressed genes.

edata = log2(as.matrix(edata) + 1)
edata = edata[rowMeans(edata) > 10, ]

#Fit many regression models at once.
mod = model.matrix(~ pdata$strain)
fit = lm.fit(mod,t(edata))
names(fit)

#Compare to output of lm
fit$coefficients[,1]

tidy(lm(as.numeric(edata[1, ]) ~ pdata$strain))

#Look at the coefficients across genes

par(mfrow=c(1,2))
hist(fit$coefficients[1,],breaks=100,col=2,xlab="Intercept")
hist(fit$coefficients[2,],breaks=100,col=2,xlab="Strain")
abline(v=0,lwd=3,col=1)

#Look at the residuals for a couple of genes

par(mfrow=c(1,2))
plot(fit$residuals[,1],col=2)
plot(fit$residuals[,2],col=2)

#Fit many regressions with an adjustment
mod_adj = model.matrix(~ pdata$strain + as.factor(pdata$lane.number))
fit_adj = lm.fit(mod_adj,t(edata))
fit_adj$coefficients[,1]

#Fit many regressions with the limma package
fit_limma = lmFit(edata,mod_adj)
names(fit_limma)

fit_limma$coefficients[1,]
fit_adj$coefficients[,1]

#Fit many regressions with the edge package
edge_study = build_study(data=edata,grp=pdata$strain,adj.var=as.factor(pdata$lane.number))
fit_edge = fit_models(edge_study)
summary(fit_edge)

fit_edge@beta.coef[1,]
fit_limma$coefficients[1,]

